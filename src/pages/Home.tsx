import React from 'react';
import { sortList } from '../components/Sort';

import { Categories, Sort, Skeleton, PizzaBlock, Pagination } from '../components';
import { useSelector, useDispatch } from 'react-redux';

import qs from 'qs';
import { useNavigate } from 'react-router-dom';
import { useAppDispatch } from '../redux/store';
import { setCategoryId, setCurrentPage, setFilters } from '../redux/filter/slice';
import { selectFilter } from '../redux/filter/seletors';
import { selectPizzaData } from '../redux/pizza/selectors';
import { fetchPizzas } from '../redux/pizza/asyncAction';
import { SearchPizzaParams } from '../redux/pizza/slice';

const Home: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();

  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);

  const { categoryId, sort, currentPage, searchValue } = useSelector(selectFilter);
  const { items, status } = useSelector(selectPizzaData);

  //   const sortType = sort.sortProperty; // –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å sort.sortProperty

  //   const [currentPage, setCurrentPage] = React.useState(1);

  const onChangeCategory = React.useCallback((id: number) => {
    dispatch(setCategoryId(id));
  }, []);
  const onChangePage = (page: number) => {
    dispatch(setCurrentPage(page));
  };

  // fetch(
  //   `https://685c5202769de2bf085c6821.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`,
  // )
  //   .then((res) => {
  //     return res.json();
  //   })
  //   .then((arr) => {
  //     setItems(arr); //–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ü—Ü
  //     setIsLoading(false); //–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫–µ–ª–µ—Ç–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å(—á—Ç–æ–±—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –Ω–µ –≥—Ä—É–∑–∏–ª–æ—Å—å), —Å–∫—Ä—ã–≤–∞–µ—Ç
  //   });

  const getPizzas = async () => {
    // setIsLoading(true); //–ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞

    const sortBy = sort.sortProperty.replace('-', '');
    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
    const category = categoryId > 0 ? `category=${categoryId}` : '';
    const search = searchValue ? `&search=${searchValue}` : '';

    // await axios
    //   .get(
    //     `https://685c5202769de2bf085c6821.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`,
    //   )
    //   .then((res) => {
    //     setItems(res.data);
    //     setIsLoading(false);
    //   })
    //   .catch((err) => {
    //     setIsLoading(false);
    //   });

    dispatch(
      fetchPizzas({
        sortBy,
        order,
        category,
        search,
        currentPage: String(currentPage),
      }),
    );

    window.scrollTo(0, 0);
  };

  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
  React.useEffect(() => {
    // –¢–µ–ø–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±—Ä–∞—É–∑–µ—Ä–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—å—Å—è –∏ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—é—Ç—å—Å—è

    // –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    if (isMounted.current) {
      const params = qs.stringify({
        sortProperty: sort.sortProperty,
        categoryId,
        currentPage,
      });
      const queryString = qs.stringify(params, { skipNulls: true });
      navigate(`?${queryString}`);
    }
    if (!window.location.search) {
      dispatch(fetchPizzas({} as SearchPizzaParams));
    }
  }, [categoryId, sort.sortProperty, searchValue, currentPage]);

  //–µ—Å—Ç—å –ª–∏ –≤ url –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  //–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º url –ø–∞–º–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥–∞–∫—Å–µ. –ù–∞ –≤—Ç–æ—Ä–æ–π —Ä–µ–Ω–¥–µ—Ä –±—É–¥–µ—Ç true –∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
  React.useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1)) as unknown as SearchPizzaParams; //substring(1) - —É–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –≤ –Ω–∞—á–∞–ª–µ
      const sort = sortList.find((obj) => obj.sortProperty == params.sortBy);
      dispatch(
        setFilters({
          searchValue: params.search,
          categoryId: Number(params.category),
          currentPage: Number(params.currentPage),
          sort: sort || sortList[0],
        }),
      );
    }
    isSearch.current = true;
  }, []);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
  React.useEffect(() => {
    //–µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∏—Å–∫–∞ –ø–æ params –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    // –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥—Ä–µ—Ä–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–π, –∂–¥–∏. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–¥—É—Ç –∏–∑ url
    getPizzas();
  }, [categoryId, sort.sortProperty, searchValue, currentPage]);

  const pizzas = items.map((obj: any) => <PizzaBlock key={obj.id} {...obj} />);

  const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />);

  return (
    <div className="container">
      <div className="content__top">
        <Categories value={categoryId} onChangeCategory={onChangeCategory} />
        <Sort value={sort} />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === 'error' ? (
        <div className="content__error-info">
          <h2>
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ <span>üòï</span>
          </h2>
          <p>–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</p>
        </div>
      ) : (
        <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
      )}
      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
};

export default Home;
